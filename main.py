from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import os
load_dotenv()
TOKEN = os.getenv("TOKEN")
PDF_FILES = {
    "VishMat_Lec1": r"C:\Users\artem\Desktop\TgBot\VishMat\lec1.pdf",
    "VishMat_Lec2": r"C:\Users\artem\Desktop\TgBot\VishMat\lec2.pdf"
}

def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("–í–∏—â–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data='VishMat')]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_to_topics_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ç–µ–º", callback_data='back_to_topics')]
    ]
    return InlineKeyboardMarkup(keyboard)

def topics_keyboard():
    keyboard = [
        [InlineKeyboardButton("–¢–µ–º–∞ 1. –í–ò–ó–ù–ê–ß–ù–ò–ö–ò. –ú–ê–¢–†–ò–¶–Ü", callback_data='VishMat_Lec1')],
        [InlineKeyboardButton("–¢–µ–º–∞ 2. (–°–õ–ê–†)", callback_data='VishMat_Lec2')],
        [InlineKeyboardButton("–¢–µ–º–∞ 3. –í–ï–ö–¢–û–†–ù–ê –ê–õ–ì–ï–ë–†–ê", callback_data='VishMat_Lec3')],
        [InlineKeyboardButton("–¢–µ–º–∞ 4. –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—è –Ω–∞ –ø–ª–æ—â–∏–Ω—ñ", callback_data='VishMat_Lec4')],
        [InlineKeyboardButton("–¢–µ–º–∞ 5. –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—è –≤ —Ç—Ä–∏–≤–∏–º—ñ—Ä–Ω–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ", callback_data='VishMat_Lec5')],
        [InlineKeyboardButton("–¢–µ–º–∞ 6. –í—Å—Ç—É–ø –¥–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É", callback_data='VishMat_Lec6')],
        [InlineKeyboardButton("–¢–µ–º–∞ 7. –ß—É–¥–æ–≤—ñ –≥—Ä–∞–Ω–∏—Ü—ñ –ù–µ–ø–µ—Ä–µ—Ä–≤–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó", callback_data='VishMat_Lec7')],
        [InlineKeyboardButton("–¢–µ–º–∞ 8. –î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–∞–ª—å–Ω–µ —á–∏—Å–ª–µ–Ω–Ω—è", callback_data='VishMat_Lec8')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_subjects')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–≤–æ—ó—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç—ñ–≤ üìö.")
    await update.message.reply_text("–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏:", reply_markup=main_keyboard())

async def show_subjects(update, context):
    await update.message.reply_text("–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏:", reply_markup=main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    async def safe_edit(text, reply_markup=None):
        try:
            await query.edit_message_text(text=text, reply_markup=reply_markup)
        except Exception:
            await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

    if query.data == "VishMat":
        await safe_edit("–í–∏ –æ–±—Ä–∞–ª–∏ –í–∏—â—É –º–∞—Ç–µ–º–∞—Ç–∏–∫—É. –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=topics_keyboard())

    elif query.data == "back_to_subjects":
        await safe_edit("–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏:", reply_markup=main_keyboard())

    elif query.data == "back_to_topics":
        await safe_edit("–í–∏ –æ–±—Ä–∞–ª–∏ –í–∏—â—É –º–∞—Ç–µ–º–∞—Ç–∏–∫—É. –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=topics_keyboard())

    elif query.data in PDF_FILES:
        file_path = PDF_FILES[query.data]
        if os.path.exists(file_path):
            with open(file_path, 'rb') as f:
                await context.bot.send_document(chat_id=chat_id, document=f)

            await context.bot.send_message(
                chat_id=chat_id,
                text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ–º:",
                reply_markup=back_to_topics_keyboard()
            )
        else:
            await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢")

if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", show_subjects))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
